<?php
/*  TODO:
 * add category to manifest for other admin logins
 *
 * strategy pattern?
 *
 *
 * This piece in root directory picked random file generated by admin-ads plugin from manifest.json. Quick and sloppy and dirty but worked
 */

class randfile {

	// hacky
	private $readfrom = "../wp-content/uploads/gdlogin/";
	
	// query string in referring url https://granicus.com/gdlogin?ap=peak
	// parse_str(parse_url($_SERVER['HTTP_REFERER'], PHP_URL_QUERY), $queries);
	// if no query, use manifest.json
	// parse_url(), parse_str($parts['query'])
	// switch on query to manifest - match query to query-manifest
	// if category peak, save to peak-manifest, etc
	
	
	/**
	  *  fallback html if no manifest.json file
	  * TODO: get fallback from file
	  *
	  * @var string
	  */
	private $fallback = '<!DOCTYPE HTML><html><head><title></title><style>html { background-image: url("bg-gradient-a.png");background-size: cover;}</style></head><body></body></html>';
	
	/**
	  *  find if dates are within range
	  *
	  * @param $start, $end, $default now
	  * @return bool
	  */
	public function datebetween( $start, $end, $date = 'now' ) {
	    $date = $this->parsedates( $date );
	    $start = $this->parsedates( $start );
	    $end = $this->parsedates( $end );
	    if ( ( $date > $start ) && ( $date < $end ) ) {
	    	return true;
	    } elseif ( empty( $start ) && empty( $end ) ) {
	    	return true; // use if no dates...
	    } else {
	    	return false;
	    }
	}
	
	/**
	  *  return date
	  *
	  * @param $date
	  * @return string
	  */
	public function parsedates( $date ){
		return is_int( $date ) ? $date : strtotime( $date );
	}
	
	public function get_admanifest() {
		if ( file_exists( $this->readfrom . 'manifest.json' ) ) { 
			$files = file_get_contents( $this->readfrom . 'manifest.json' );
			$decoded = json_decode( $files, true );
			return $decoded;
		} else {
			//var_dump( $_SERVER['HTTP_HOST']);
			echo $this->fallback;
			//echo '<script type="text/javascript">alert(document.referrer);</script>';
			exit();
		}	
	}
	
	/**
	  *  fetch admanifest json file and return a random array
	  *  if no admanifest file, echos fallback html
	  *
	  * @param none
	  * @return array (ID, startdate, enddate, url)
	  */
	public function random_file() {
		$one = array();
		$fads = array();
		// only load admanifest once!
		// load in __construct?
		$fads = $this->get_admanifest();
		$count = count( $fads );
		// if count > 1, else num =1
		$num = mt_rand( 0, $count - 1 );
		$one = $fads[$num];
		$one['count'] = $count;
		return $one;		
	}
	
	/**
	  *  output a valid ad html file within specified date ranges, or a file without date ranges. recurses until a valid file is found
	  *
	  * @param none
	  * @var $r int
	  * @var $file array
	  * @var $usedate bool
	  * @var $thehtml string
	  * @return string
	  */
	public function output($r) {	
		// use sort algorithm instead of count	
		$rfile = $this->random_file();
		$usedate = $this->datebetween( $rfile['start'], $rfile['end'] );  // boolean
		$count = $rfile['count'];
		if ( $r == $count) {
			echo $this->fallback;
			exit();
		}
		if ( $usedate == true ) {
			$thehtml = file_get_contents( $rfile['url'] );
			// file_get_contents can return false
			if ( empty($thehtml) || false === $thehtml ) {
				$r++;
				$this->output($r);
			} else {
				
				echo $thehtml;
				//var_dump($rfile);
				exit();
			}
		} else {   					// out of date range
			$r++;					// increment
			$this->output($r);		// recurse
		}
	}
	
}// end class
	
	$loadpage = new randfile;
	$loadpage->output($r=0);
?>